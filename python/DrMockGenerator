#!/usr/bin/env python3.7

# Copyright 2019 Ole Kliemann, Malte Kliemann
#
# This file is part of DrMock.
#
# DrMock is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DrMock is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DrMock.  If not, see <https://www.gnu.org/licenses/>.

from __future__ import annotations
import mocker
from mocker import parse
from mocker import utils
import argparse
import os.path
import re

# Parse the arguments.
parser = argparse.ArgumentParser()
parser.add_argument("input")
parser.add_argument("output_header")
parser.add_argument("output_source")
parser.add_argument(
    "interface_pattern", 
    default = "I([A-Z].*)"
)
parser.add_argument(
    "mock_pattern", 
    default = "*Mock"
)
parser.add_argument(
    "--std", 
    default = "c++17"
)
parser.add_argument(
    "-I", 
    "--isystem", 
    nargs="*", 
    required=False
)
parser.add_argument(
    "-F", 
    "--iframework", 
    nargs="*", 
    required=False
)
parser.add_argument(
    "--before-install", 
    action="store_true", 
    default=False
)
args = parser.parse_args()
if args.isystem is None:
    args.isystem = []
if args.iframework is None:
    args.iframework = []
# print("Mocking " + args.input)

# Configure clang.
parse.configure(
    args.std, 
    args.isystem, 
    args.iframework,
    args.before_install
)
# Find the target class.
cls = parse.get_class(args.interface_pattern, args.input)
# Determine name of the mock class.
mock_name = utils.swap(
    args.interface_pattern, 
    args.mock_pattern, 
    cls.name
)
# Create mock object.
header, source = cls.mock(
    args.input,
    mock_name,
    args.output_header
)

# Write mock object to file.
with open(args.output_header, "w") as file:
    file.write(str(header))
with open(args.output_source, "w") as file:
    file.write(str(source))
